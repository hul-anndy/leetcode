/*You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Subscribe to see which companies asked this question.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result_head = NULL;
		ListNode* current_node = NULL;
		int carry = 0;
		while(l1 || l2)
		{
			ListNode* new_node = new ListNode(0);
			if (l1)
			{
				new_node->val += l1->val;
				l1 = l1->next;
			}
			if (l2)
			{
				new_node->val += l2->val;
				l2 = l2->next;
			}
			new_node->val += carry;
			carry = new_node->val / 10;
			new_node->val = new_node->val % 10;
			if (!result_head)
			{
				result_head = new_node;
				current_node = new_node;
			}
			else
			{
				insertSingleNodeToList(new_node, current_node);
				current_node = current_node->next;
			}
		}
		if (carry > 0)
		{
			ListNode* new_node = new ListNode(carry);
			insertSingleNodeToList(new_node, current_node);
		}
		return result_head;
    }
private:
void insertSingleNodeToList(ListNode* node, ListNode* list_target)
{
	if (node && list_target)
	{
		node->next = list_target->next;
		list_target->next = node;
	}
}
};

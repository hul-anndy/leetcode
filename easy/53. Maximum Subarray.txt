/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

[-2,1,-3,4,-1,2,1,-5,4]
[-3,-2,0,-1]
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int result = 0;
		if (!nums.empty())
		{
			result = nums[0];
			int index = 0;
			int current_sum = 0;
			while (index < nums.size())
			{
				current_sum += nums[index];
				if (current_sum > result)
				{
					result = current_sum;
				}
				if (current_sum < 0)
				{
					current_sum = 0;
				}
				index++;
			}
		}
		return result;
    }
};
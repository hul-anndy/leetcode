/*The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);
convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".
*/
/*//simple
class Solution {
public:
    string convert(string s, int numRows) {
	string result;
        int length = s.length();
        int m_row = numRows>2?numRows-2:0;
	int circle_length = numRows+m_row;
	for(int i = 0;i<numRows; ++i)
	{
		for(int j =0; j <length; ++j)
		{
			if(j%circle_length ==i || isZig(j,i,numRows))
			{
				result+=s[j];
			}
		}
	}
	return result;
    }
    bool isZig(const int index, const int row, const int total_row)
    {
	bool result = false;
	int m_row = total_row>2?total_row-2:0;
	int circle_length = total_row+m_row;
	if(row > 0 && row < total_row-1)
	{
		int zig_number = index%circle_length;
		if (zig_number >= total_row)
		{
			zig_number = zig_number - total_row +1;
			int zig_row= total_row-2-zig_number+1;
			result = zig_row == row;
		}
	}
	return result;
    }
};*/

//try to speed up
class Solution {
public:
    string convert(string s, int numRows) {
	string result;
	m_nTotalRow = numRows;
        int length = s.length();
        int m_nZigRow = numRows>2?numRows-2 : 0;
	int m_nCircle = numRows+m_nZigRow;

	for(int i = 0;i<numRows; ++i)
	{
		int base_index = i;
		int zig_index = (i==0||i==numRows-1)?-1:numRows-1 + (m_nZigRow-i+1);
		while (base_index < length)
		{
			result+=s[base_index];
			base_index += m_nCircle;
			if(zig_index!=-1 && zig_index < length)
			{
				result += s[zig_index];
				zig_index+=m_nCircle;
			}
		}
	}
	return result;
    }
    bool isZig(const int index, const int row)
    {
	bool result = false;
	if(row > 0 && row < m_nTotalRow-1)
	{
		int zig_number = index % m_nCircle;
		if (zig_number >= m_nTotalRow)
		{
			zig_number = zig_number - m_nTotalRow +1;
			int zig_row= m_nTotalRow-2-zig_number+1;
			result = zig_row == row;
		}
	}
	return result;
    }
   private:
   int m_nTotalRow;
   int m_nZigRow;
   int m_nCircle;
};
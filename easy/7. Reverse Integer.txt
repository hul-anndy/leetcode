/*Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321

click to show spoilers.

Note:
The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.
*/

class Solution {
public:
    int reverse(int x) {
        int result = 0;
        const int MAX_LENGTH_BASIC_NUMBER = 1000000000;
        int TEN_BASIC_NUMBER = 10;
        if (x/MAX_LENGTH_BASIC_NUMBER != 0 && (x % TEN_BASIC_NUMBER >2 || x % TEN_BASIC_NUMBER<-2))
        {
            return result;
        }

        int source = x;
        while (source != 0)
        {
            int single_digit = source % TEN_BASIC_NUMBER;
            source /= TEN_BASIC_NUMBER;
            if (single_digit != 0 || result != 0)
            {
                result *= TEN_BASIC_NUMBER;
                result += single_digit;
                if (!isTwoNumberLike(result, x))
                {
                    result = 0;
                    break;
                }
            }
        }

        return result;
    }
    bool isTwoNumberLike(const int first, const int second)
    {
        return (first >= 0 && second >= 0) || (first <= 0 && second <= 0);
    }
};
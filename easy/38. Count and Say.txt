/*
The count-and-say sequence is the sequence of integers with the first five terms as following:
1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.
Note: Each term of the sequence of integers will be represented as a string.
Example 1:
Input: 1
Output: "1"
Example 2:
Input: 4
Output: "1211"

//Note: simple issue.
remember this:
string int_to_string(const int n)
	{
		ostringstream stream;
		stream << n;
		return stream.str();
	}
*/

class Solution {
public:
    string countAndSay(int n) {
        string result;
		if (n > 0)
		{
			result = "1";
			for (int i = 1; i < n; ++i)
			{
				string new_string;
				int index_str = 0;
				while (index_str < result.size())
				{
					int count = 0;
					int new_index = index_str;
					while (new_index < result.size() && result[new_index] == result[index_str])
					{
						new_index++;
						count++;
					}
					new_string += int_to_string(count);
					new_string += result[index_str];
					index_str = new_index;
				}
				result = new_string;
			}
		}
		return result;
    }
	
	string int_to_string(const int n)
	{
		ostringstream stream;
		stream << n;
		return stream.str();
	}
};
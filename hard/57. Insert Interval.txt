/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

Note:
Scan all of the vector, and handle every condition.
I think it's not hard.
*/

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> result;
		bool is_searched = false;
		for (int i = 0; i < intervals.size(); ++i)
		{
			if (intervals[i].end < newInterval.start)
			{
				result.push_back(intervals[i]);
			}
			else if (intervals[i].start > newInterval.end)
			{
				if (!is_searched)
				{
					is_searched = true;
					result.push_back(newInterval);
				}
				result.push_back(intervals[i]);
			}
			else if (intervals[i].start <= newInterval.start && intervals[i].end >= newInterval.end)
			{
				is_searched = true;
				result.push_back(intervals[i]);
			}
			else if (intervals[i].start < newInterval.start && intervals[i].end >= newInterval.start)
			{
				newInterval.start = intervals[i].start;
			}
			else if (intervals[i].start <= newInterval.end && intervals[i].end > newInterval.end)
			{
				newInterval.end = intervals[i].end;
			}
		}
		if (!is_searched)
		{
			result.push_back(newInterval);
		}
		return result;
    }
};
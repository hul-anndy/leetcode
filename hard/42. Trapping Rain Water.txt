/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Note: I think the problom like this: normal bar is useless, every the highest top bar can be regarded as a wave top and we only need to clear up the lower wave between the higher wave until there is no this case.
But how to distinguish the wave top? We Only need to find every first descended node.
*/

#define min(a,b) ((a) < (b)) ? (a) :(b)

class Solution {
public:
	enum TRAP_STATE { FIND_INCREASE = 0, FIND_DECREASE=1 };
	int trap(vector<int>& height) {
		int result = 0;
		TRAP_STATE trap_state = FIND_DECREASE;
		int left_index = -1;
		vector<int> availed_bar;
		/*
		//initialize, but this is a little slow
		for (int i = 0; i < height.size(); ++i)
		{
			availed_bar.push_back(i);
		}*/
		//this initialization can speed up.
		for (int i = 0; i < height.size(); ++i)
		{
			if (trap_state == FIND_DECREASE)
			{
				if (i + 1 < height.size() && height[i] > height[i + 1]
					|| i + 1 == height.size() )
				{
					trap_state = FIND_INCREASE;
					availed_bar.push_back(i);
				}
			}
			else
			{
				if (((i + 1) < height.size()) && (height[i] < height[i + 1]))
				{
					//find increase
					trap_state = FIND_DECREASE;
				}
			}
		}
		while (serviceAvailedBar(height, availed_bar)){}

		for (int i = 0; i + 1 < availed_bar.size(); ++i)
		{
			result += calculateTrap(height, availed_bar[i], availed_bar[i + 1]);
		}
		return result;
	}
	bool serviceAvailedBar(const vector<int>&height, vector<int>& availed_bar)
	{
		bool result = false;
		TRAP_STATE state = FIND_DECREASE;
		int last_dec = -1;
		for (int i = 0; i < availed_bar.size(); ++i)
		{
			if (state == FIND_DECREASE)
			{
				if (i + 1 < availed_bar.size() && height[availed_bar[i]] > height[availed_bar[i + 1]]
					|| i + 1 == availed_bar.size())
				{
					if (last_dec == -1)
					{
						last_dec = i;
						
					}
					else
					{
						int j = last_dec + 1;
						int min_height = min(height[availed_bar[last_dec]], height[availed_bar[i]]);
						while (j < i)
						{
							if (height[availed_bar[j]] <= min_height)
							{
								availed_bar.erase(availed_bar.begin() + j);
								result = true;
								i--;
							}
							else
							{
								j++;
							}
						}
						last_dec = i;

					}
					state = FIND_INCREASE;
				}

			}
			else
			{
				if (i + 1 < availed_bar.size() && height[availed_bar[i]] < height[availed_bar[i + 1]])
				{
					state = FIND_DECREASE;
				}
			}
		}
		return result;
	}
	int calculateTrap(vector<int>& height, const int left, const int right)
	{
		int result = 0;
		int min_height = min(height[left], height[right]);
		for (int i = left + 1; i < right; ++i)
		{
			if (height[i] < min_height)
			{
				result += min_height - height[i];
			}
		}
		return result;
	}
};
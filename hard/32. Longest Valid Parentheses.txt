/*
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.
For "(()", the longest valid parentheses substring is "()", which has length = 2.
Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

note:
Normal search(O(n*n)) is time limit exceeded!
The first idea is correct: extend every pair of parentheses using recursion, and there are three options such as Biderectional, Leftderectional and rightderectional matching.
((((()))))
"(()())"
"()(())"
*/

class Solution {
public:
	const char LEFT_BRACKET = '(';
	const char RIGHT_BRACKET = ')';
    int longestValidParentheses(string s) {
		int length = s.size();
		if (length == 0)
		{
			return 0;
		}
		int right_range[length];
		for (int i = 0; i < length; ++i)
		{
			right_range[i] = 0;
		}
		for (int i = 0; i < length-1; ++i)
		{
			if (s[i]==LEFT_BRACKET && s[i+1] == RIGHT_BRACKET)
			{
				right_range[i] = 2;
				right_range[i+1]=-2;
			}
		}
		for (int i = 0; i < length; ++i)
		{
			if (right_range[i] > 0)
			{
				extendParentheses(s,right_range,i,i+right_range[i]-1);
			}
		}
		int max = 0;
		for (int i = 0; i < length-1; ++i)
		{
			if (right_range[i] > max)
			{
				max = right_range[i];
			}
		}
		return max;
    }
	void extendParentheses(const string& s, int range[], int start_index, int end_index)
	{
		int next_start_index = start_index + range[start_index];

		if (start_index > 0
			&& s[start_index - 1] == LEFT_BRACKET && s[next_start_index] == RIGHT_BRACKET
			&& range[start_index - 1] < range[start_index] + 2)
		{
			range[start_index - 1] = range[start_index] + 2;
			range[end_index + 1] = -range[start_index - 1];
			range[start_index] = 0;
			range[end_index] = 0;
			extendParentheses(s, range, start_index - 1, end_index + 1);
		}
		else if (next_start_index < s.length() - 1 && range[next_start_index] > 0)
		{
			range[start_index] = range[start_index] + range[next_start_index];
			int new_end_index = start_index + range[start_index] - 1;
			range[new_end_index] = -range[start_index];
			range[next_start_index - 1] = 0;
			range[next_start_index] = 0;
			extendParentheses(s, range, start_index, new_end_index);
		}
		else if (start_index > 0 && range[start_index - 1] < 0)
		{
			int new_start_index = start_index + range[start_index - 1];
			range[new_start_index] = range[new_start_index] + range[start_index];
			range[end_index] = -range[new_start_index];
			range[start_index - 1] = 0;
			range[start_index] = 0;
			extendParentheses(s, range, new_start_index, end_index);
		}
	}

	/*Time limit exceeded, O(n*n)
	int longestValidParentheses(string s) {
		int length = s.size();
		int max = 0;
		int index = 0;
		while (index < length)
		{
			int current_length = longestValidParenthesesInStartIndex(s, index);
			if (current_length == 0)
			{
				index++;
			}
			else
			{
				index += current_length;
				if (current_length > max)
					max = current_length;
			}
		}
		return max;
    }
	int longestValidParenthesesInStartIndex(const string& s, const int index)
	{
		int max = 0;
		int parentheses = 0;
		for (int i = index; i < s.length(); ++i)
		{
			if (s[i] == LEFT_BRACKET)
			{
				parentheses++;
			}
			else if (s[i] == RIGHT_BRACKET)
			{
				if (parentheses == 0)
				{
					break;
				}
				else
				{
					parentheses--;
				}
			}
			if (parentheses == 0 && i != index)
			{
				max = i - index + 1;
			}
		}
		return max;
	}*/
};
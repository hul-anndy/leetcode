/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

Note:
Pay attention to there is only one input.
*/

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
	static inline bool smaller(Interval first, Interval second)
	{
		return first.start < second.start;
	}
    vector<Interval> merge(vector<Interval>& intervals) {
        std::sort(intervals.begin(), intervals.end(), smaller);
		vector<Interval> result;
		int start = -1;
		int end = -1;
		for (int i = 0; i < intervals.size(); ++i)
		{
			if (start == -1)
			{
				start = intervals[i].start;
				end = intervals[i].end;
			}
			else if (intervals[i].start > end)
			{
				result.push_back(Interval(start,end));
				start = intervals[i].start;
				end = intervals[i].end;
			}
			else if (intervals[i].end > end)
			{
				end = intervals[i].end;
			}
			if (i+1 == intervals.size())
			{
				result.push_back(Interval(start,end));
			}
		}
		return result;
    }
};
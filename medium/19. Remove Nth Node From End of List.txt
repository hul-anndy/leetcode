/*
Given a linked list, remove the nth node from the end of list and return its head.
For example,
   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* result_head=head;
		ListNode* first_node=head;
		ListNode* second_node=head;
		for(int i =0; i < n; ++i)
		{
			if (second_node)
				second_node = second_node->next;
		}
		if (!second_node)
		{
			if (head)
			{
				ListNode* target_node = head;
				result_head = head->next;
				delete target_node;
			}
		}
		else
		{
			while(first_node&&second_node&&second_node->next)
			{
				first_node = first_node->next;
				second_node = second_node->next;
			}
			if (first_node&&first_node->next)
			{
				ListNode* target_node = first_node->next;
				first_node->next = first_node->next->next;
				delete target_node;
			}
		}
		
		
		return result_head;
    }
};
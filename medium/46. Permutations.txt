/*
Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

Note:
It's a simple Depth-First-Search practice.
*/


class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        std::sort(nums.begin(),nums.end());
		vector<vector<int>> result;
		bool* is_used = new bool[nums.size()];
		for (int i = 0; i < nums.size(); ++i)
		{
			is_used[i] = false;
		}
		vector<int> single_result;
		dfs(nums, is_used, single_result, result);
		delete[] is_used;
		return result;
    }
	void dfs(const vector<int>& nums, bool* is_used, vector<int>& single_result, vector<vector<int>>& result)
	{
		if (single_result.size() > 0 && single_result.size() == nums.size())
		{
			result.push_back(single_result);
		}
		else
		{
			for (int i = 0; i < nums.size(); ++i)
			{
				if (!is_used[i])
				{
					is_used[i] = true;
					single_result.push_back(nums[i]);
					dfs(nums, is_used, single_result, result);
					single_result.pop_back();
					is_used[i] = false;
				}
			}
		}
	}
};
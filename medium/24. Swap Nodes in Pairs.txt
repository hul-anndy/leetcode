/*
Given a linked list, swap every two adjacent nodes and return its head.
For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

Note: simple list practice. Pay attention to the link of two pairs.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* p_head = head;
		if (head && head->next)
		{
			p_head = head->next;
		}
		while(head && head->next)
		{
			ListNode* next_start = head->next->next;
			head->next->next = head;
			head->next = next_start&&next_start->next?next_start->next:next_start;
			
			head = next_start;
		}
		return p_head;
    }
};
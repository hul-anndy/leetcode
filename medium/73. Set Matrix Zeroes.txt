/*
Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.
click to show follow up.
Follow up:
Did you use extra space?
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

Note:
just merge all of zero to one pair of row and column. And then use the rule.
*/

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
	if (!matrix.empty() && !matrix[0].empty())
	{
		int temp_row = -1;
		int temp_column = -1;
		for (int row_index = 0; row_index < matrix.size(); ++row_index)
		{
			for (int column_index = 0; column_index < matrix[0].size(); ++column_index)
			{
				if (matrix[row_index][column_index] == 0)
				{
					if(temp_row == -1)
					{
						temp_row = row_index;
						temp_column = column_index;
					}
					else
					{
						matrix[temp_row][column_index] = 0;
						matrix[row_index][temp_column] = 0;
					}
				}
			}
		}
		if (temp_row != -1)
		{
			for (int row_index = 0; row_index < matrix.size(); ++row_index)
			{
				if (matrix[row_index][temp_column] == 0 && row_index != temp_row)
				{
					for (int column_index = 0; column_index < matrix[0].size(); ++column_index)
					{
						matrix[row_index][column_index] = 0;
					}
				}
			}
			for (int column_index = 0; column_index < matrix[0].size(); ++column_index)
			{
				if (matrix[temp_row][column_index] == 0 && column_index != temp_column)
				{
					for (int row_index = 0; row_index < matrix.size(); ++row_index)
					{
						matrix[row_index][column_index] = 0;
					}
				}
			}
			for (int row_index = 0; row_index < matrix.size(); ++row_index)
			{
				matrix[row_index][temp_column] = 0;
			}
			for (int column_index = 0; column_index < matrix[0].size(); ++column_index)
			{
				matrix[temp_row][column_index] = 0;
			}
		}
	}
        
    }
};
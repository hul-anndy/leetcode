/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

[1,0,-1,0,-2,2]
0
sort:
[-2,-1,0,0,1,2]
*/

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        std::sort(nums.begin(), nums.end());
		vector<vector<int>> result;
		int size = nums.size();
		int d_value = 0;
		int left = 0;
		int right = 0;
		for (int start = 0; start < size - 3; )
		{
		for (int end = size-1; end >= start+3; )
		{
			d_value = target - nums[start] - nums[end];
			left = start+1;
			right = end-1;
			while(left < right)
			{
				if (nums[left]+nums[right] == d_value)
				{
					result.push_back({nums[start],nums[left],nums[right],nums[end]});
					left=getSufDifferentPosition(nums,left);
					right=getPreDifferentPosition(nums,right);
				}
				else if(nums[left]+nums[right] < d_value)
				{
					left=getSufDifferentPosition(nums,left);
				}
				else
				{
					right=getPreDifferentPosition(nums,right);
				}
			}
			end = getPreDifferentPosition(nums,end);
		}
		start = getSufDifferentPosition(nums,start);
		}
		
		return result;
    }
	int getSufDifferentPosition(vector<int>& nums, int source_position)
	{
		int result = source_position+1;
		while (nums[result] == nums[source_position])
			result++;
		return result;
	}
	int getPreDifferentPosition(vector<int>& nums, int source_position)
	{
		int result = source_position-1;
		while (nums[result] == nums[source_position])
			result--;
		return result;
	}
};
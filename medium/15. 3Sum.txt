/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4],
{1,1,-2}
{1,2,-1,-2}
{0,0,0}


A solution set is:
[
[-1, 0, 1],
[-1, -1, 2]
]
*/

class Solution {
public:
	const int ERROR_INT = -1;
	vector<vector<int>> threeSum(vector<int>& nums) {
	//run time complexity is O(n*n)
		vector<vector<int>> result;
		int size = nums.size();
		if (size < 3)
			return result;
		int max_pos = size - 1;

		vector<int> sorted_nums = nums;
		std::sort(sorted_nums.begin(), sorted_nums.end());
		int negative_pos = 0;

		while (negative_pos < size && sorted_nums[negative_pos] < 0)
		{
			++negative_pos;
		}
		int positive_pos = negative_pos;
		while (positive_pos < size && sorted_nums[positive_pos] <= 0)
		{
			++positive_pos;
		}
		int left = 0;
		int right = 0;
		int target = 0;
		int left_base = 0;
		int right_base = 0;

		for (int i = 0; i < positive_pos; ++i)
		{
			if (i != 0 && sorted_nums[i-1] == sorted_nums[i])
				continue;
			left = i+1;
			right = max_pos;
			target = -sorted_nums[i];
			while (left <  right)
			{
				if (sorted_nums[left] + sorted_nums[right] == target)
				{
					vector<int> single = { sorted_nums[i],sorted_nums[left],sorted_nums[right] };
					//if (!lastEqual(result, single))
					result.push_back(single);
					left_base = sorted_nums[left];
					while (left_base == sorted_nums[left])
					++left;
					right_base = sorted_nums[right];
					while (right_base == sorted_nums[right])
					--right;
				}
				else if (sorted_nums[left] + sorted_nums[right] < target)
				{
					++left;
				}
				else
				{
					--right;
				}
			}
		}

		return result;
	}
	/*//O(n*n*log(n))
	vector<vector<int>> threeSum(vector<int>& nums) {
	vector<vector<int>> result;
	int size = nums.size();
	if (size < 3)
	return result;
	int max_pos = size - 1;

	vector<int> sorted_nums = nums;
	std::sort(sorted_nums.begin(), sorted_nums.end());
	int negative_pos = 0;

	while (negative_pos < size && sorted_nums[negative_pos] < 0)
	{
	++negative_pos;
	}
	int positive_pos = negative_pos;
	while (positive_pos < size && sorted_nums[positive_pos] <= 0)
	{
	++positive_pos;
	}
	int last_i = 0;
	int last_j = 0;
	for (int i = 0; i < negative_pos - 1; ++i)
	{
	if (i != 0 && sorted_nums[i] == last_i)
	continue;
	last_i = sorted_nums[i];
	for (int j = i + 1; j < negative_pos; ++j)
	{
	if (j != i + 1 && sorted_nums[j] == last_j)
	continue;
	last_j = sorted_nums[j];
	int another = -(sorted_nums[i] + sorted_nums[j]);
	if (another > sorted_nums[max_pos])
	continue;
	int another_pos = bSearch(sorted_nums, negative_pos, max_pos, another);
	if (another_pos != ERROR_INT)
	{
	vector<int> single = { sorted_nums[i],sorted_nums[j],sorted_nums[another_pos] };
	if (!lastEqual(result, single))
	result.push_back(single);
	}
	}
	}

	if (sorted_nums[negative_pos] == 0)
	{
	for (int i = 0; i < negative_pos; ++i)
	{
	if (i != 0 && sorted_nums[i] == last_i)
	continue;
	last_i = sorted_nums[i];
	int another = -sorted_nums[i];
	int another_pos = bSearch(sorted_nums, negative_pos + 1, max_pos, another);
	if (another_pos != ERROR_INT)
	{
	vector<int> single = { sorted_nums[i],sorted_nums[negative_pos],sorted_nums[another_pos] };
	if (!lastEqual(result, single))
	result.push_back(single);
	}
	}
	if (negative_pos < max_pos && sorted_nums[negative_pos+1] == 0)
	{
	if (negative_pos+1 < max_pos && sorted_nums[negative_pos + 2] == 0)
	{
	vector<int> single = { 0,0,0};
	if (!lastEqual(result, single))
	result.push_back(single);
	}
	}
	}

	for (int i = positive_pos ; i < max_pos; ++i)
	{
	if (i != positive_pos  && sorted_nums[i] == last_i)
	continue;
	last_i = sorted_nums[i];
	for (int j = i + 1; j < size; ++j)
	{
	if (j != i + 1 && sorted_nums[j] == last_j)
	continue;
	last_j = sorted_nums[j];
	int another = -(sorted_nums[i] + sorted_nums[j]);
	if (another > sorted_nums[max_pos])
	continue;
	int another_pos = bSearch(sorted_nums, 0, negative_pos - 1, another);
	if (another_pos != ERROR_INT)
	{
	vector<int> single = { sorted_nums[another_pos],sorted_nums[i],sorted_nums[j] };
	if (!lastEqual(result, single))
	result.push_back(single);
	}
	}
	}

	return result;
	}*/
	bool lastEqual(vector<vector<int>>& result, vector<int>& search)
	{
		bool bool_result = false;
		if (!result.empty())
		{
			int i = result.size() - 1;
			bool temp_cmp = true;
			for (int j = 0; j < search.size(); ++j)
			{
				if (search[j] != result[i][j])
				{
					temp_cmp = false;
					break;
				}
			}
			bool_result = temp_cmp;
		}

		return bool_result;
	}

	int bSearch(const vector<int>& sorted_nums, const int left, const int right, const int search)
	{
		int result = ERROR_INT;
		if (left <= right && left >= 0 && right < sorted_nums.size())
		{
			int mid = (left + right) / 2;
			if (search == sorted_nums[mid])
				return mid;
			else if (search < sorted_nums[mid])
				return bSearch(sorted_nums, left, mid - 1, search);
			else if (search > sorted_nums[mid])
				return bSearch(sorted_nums, mid + 1, right, search);
		}

		return result;
	}
};
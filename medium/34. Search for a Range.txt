/*Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

in: [2,2] 2
//NOTE:
Different binary search, add condition of function return when we find the target in the vector.
*/


class Solution {
public:
enum STAIR_TYPE{STAIR_START = 0, STAIR_END};
    vector<int> searchRange(vector<int>& nums, int target)
	{
		int one_target_index = bSearch(nums, target, 0, nums.size()-1);
		
		vector<int> result;
		result.push_back(bSearchStair(nums,STAIR_START, target, 0, nums.size()-1));
		result.push_back(bSearchStair(nums,STAIR_END, target, 0, nums.size()-1));	
		return result;
    }
	
	int bSearchStair(vector<int>& nums,const STAIR_TYPE stair_type, const int target, const int left, const int right)
	{
		if (left > right)
		{
			return -1;
		}
		int mid = (left+right)/2;
		if (target == nums[mid])
		{
			if (stair_type == STAIR_START)
			{
				if (mid==0 || (mid>0 && nums[mid-1]!=target))
				{
					return mid;
				}
				else
				{
					return bSearchStair(nums,stair_type, target, left, mid-1);
				}
			}
			else
			{
				if (mid==nums.size()-1 || (mid<(nums.size()-1) && nums[mid+1]!=target))
				{
					return mid;
				}
				else
				{
					return bSearchStair(nums,stair_type, target, mid+1, right);
				}
			}
		}
		else if (target < nums[mid])
		{
			return bSearchStair(nums,stair_type, target, left, mid-1);
		}
		else
		{
			return bSearchStair(nums,stair_type, target, mid+1, right);
		}
	}
	int bSearch(vector<int>& nums,const int target, const int left, const int right)
	{
		if (left > right)
		{
			return -1;
		}
		int mid = (left+right)/2;
		if (target == nums[mid])
		{
			return mid;
		}
		else if (target < nums[mid])
		{
			return bSearch(nums, target, left, mid-1);
		}
		else
		{
			return bSearch(nums, target, mid+1, right);
		}
	}
};
/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.

*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
		int result = -1;
		if (nums.size() > 0)
		{
			int int_cut = bSearchCut(nums,0,nums.size()-1);
			if (int_cut != -1)
			{
				if (nums[0]<=target && target<=nums[int_cut])
				{
					result = bSearch(nums,target,0,int_cut);
				}
				else if(int_cut+1<nums.size() 
					&& nums[int_cut+1]<=target && target<=nums[nums.size()-1])
				{
					result = bSearch(nums,target,int_cut+1,nums.size()-1);
				}
			}
			else
			{
				result = bSearch(nums,target,0,nums.size()-1);
			}
		}
        return result;
    }
	int bSearchCut(vector<int>& nums, int left, int right)
	{
		if (left == right)
			return -1;
		if (left == right-1)
		{
			if (nums[left] > nums[right])
				return left;
			else
				return -1;
		}
		else
		{
			int mid = (left+right)/2;
			if (nums[left] > nums[mid])
			{
				return bSearchCut(nums,left,mid);
			}
			else
			{
				return bSearchCut(nums,mid,right);
			}
		}
		
	}
	int bSearch(vector<int>& nums, int target,int left, int right)
	{
		if (left > right)
			return -1;
		int mid = (left+right)/2;
		if (nums[mid] == target)
		{
			return mid;
		}
		else if (target < nums[mid])
		{
			return bSearch(nums,target,left,mid-1);
		}
		else if (target > nums[mid])
		{
			return bSearch(nums,target,mid+1,right);
		}
	}
};
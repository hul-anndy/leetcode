/*Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example:
Input: "babad"

Output: "bab"

Note: "aba" is also a valid answer.
Example:
Input: "cbbd"

Output: "bb"*/

/*//brute force O(n3)
class Solution {
public:
    string longestPalindrome(string s) {
        int max_palindromic = 0;
		int length = s.length();
		int palindromic_start_position = 0;
		for (int i = 0; i < length-max_palindromic; ++i)
		{
			for (int j = i+max_palindromic; j < length; ++j)
			{
				if (isRangePalindromic(s,i,j) && j-i+1 > max_palindromic)
				{
					max_palindromic = j-i+1;
					palindromic_start_position = i;
				}
			}
		}
		string str_result = s.substr(palindromic_start_position, max_palindromic);
		return str_result;
    }
	bool isRangePalindromic(const string& s, const int start_position, const int end_position)
	{
		int start = start_position;
		int end = end_position;
		while(start <= end && s[start] == s[end])
		{
			start++;
			end--;
		}
		bool result = start > end;
		return result;
	}
};
*/

/*//dynamic program
class Solution {
public:
    string longestPalindrome(string s) {
	string result;
        int max_palindromic = 0;
		int max_start = 0;
		
		int length = s.length();
		if (length != 0)
			{
				max_palindromic = 1;
			}
		bool p_map[length][length];
		//initialize p map
		memset(p_map,0,length*length*sizeof(bool));
		for (int i = 0; i < length; ++i)
		{
			p_map[i][i] = true;
			if (i < length-1 && s[i] == s[i+1])
			{
				max_palindromic = 2;
				max_start = i;
				p_map[i][i+1] = true;
			}
			
		}
		int temp_p_length = 0;
		for (int i = length-1; i > 0; --i)
		for (int j = i; j < length; ++j)
		{
			if (p_map[i][j] && i > 0 && j < length-1 && s[i-1]==s[j+1])
			{
				p_map[i-1][j+1] = true;
				temp_p_length = j-i+3;
				if (temp_p_length > max_palindromic)
				{
					max_palindromic = temp_p_length;
					max_start = i-1;
				}
			}
		}
		result = s.substr(max_start,max_palindromic);
		return result;
    }
};*/
class Solution {
public:
    string longestPalindrome(string s) {
	string result;
        int max_palindromic = 0;
		int max_start = 0;
		
		int length = s.length();
		if (length != 0)
			{
				max_palindromic = 1;
			}
		for (int i=0; i < length; ++i)
		{
			int spread_length_single = spread(s,i,i);
			int spread_length_double = spread(s,i,i+1);
			int spread_max = max(spread_length_single,spread_length_double);
			if (spread_max > max_palindromic)
			{
				max_palindromic = spread_max;
				max_start = i-((max_palindromic+1)/2-1);
			}
			
		}
		result = s.substr(max_start,max_palindromic);
		return result;
    }
	int max(const int first, const int second)
	{
		return first > second ?first:second;
	}
	int spread(const string s, int start, int end)
	{
		int length = s.length();
		
		while (start >= 0 && end < length && s[start] == s[end])
		{
			--start;
			++end;
		}
		int result = end-start+1-2;
		return result;
	}
};
/*
Difficulty: Medium
Given a digit string, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.*/

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        static const vector<vector<char>> VECTOR_NUM_CHAR = {{' '},//0
		{},//1
		{'a','b','c'},//2
		{'d','e','f'},//3
		{'g','h','i'},//4
		{'j','k','l'},//5
		{'m','n','o'},//6
		{'p','q','r','s'},//7
		{'t','u','v'},//8
		{'w','x','y','z'},//9
		};
		list<string> list_temp;
		int current_digit = 0;
		vector<char> current_num_chars;
		for (int i = 0; i < digits.size(); ++i)
		{
			current_digit = char2digit(digits[i]);
			current_num_chars = VECTOR_NUM_CHAR[current_digit];
			if (list_temp.empty())
			{
				for (int j = 0; j < current_num_chars.size(); ++j)
				{
					string single_string;
					single_string.push_back(current_num_chars[j]);
					list_temp.push_back(single_string);
				}
			}
			else
			{
				int current_length = list_temp.size();
				for (int j = 0; j < current_length; ++j)
				{
					string front_string = list_temp.front();
					for (int k = 0; k < current_num_chars.size(); ++k)
					{
						string single_string = front_string;
						single_string.push_back(current_num_chars[k]);
						list_temp.push_back(single_string);
					}
					list_temp.pop_front();
				}
			}
		}
		vector<string> result;
		std::copy(list_temp.begin(), list_temp.end(), std::back_inserter(result));
		return result;
    }
	int char2digit(char c)
	{
		int result = c - '0';
		return result;
	}
};
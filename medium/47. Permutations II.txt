/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

Note:
Just like 46.
For each "for" circle in dfs(), we need skip the same number which have been searched for unique permutations.
*/


class Solution {
public:
	vector<vector<int>> permuteUnique(vector<int>& nums) {
		std::sort(nums.begin(), nums.end());
		vector<vector<int>> result;
		vector<int> single_result;
		bool* is_used = new bool[nums.size()];
		for (int i = 0; i < nums.size(); ++i)
		{
			is_used[i] = false;
		}
		dfs(nums, is_used, single_result, result);
		delete[] is_used;
		return result;
	}
	void dfs(const vector<int>& nums, bool* is_used, vector<int>& single_result, vector<vector<int>>& result)
	{
		if (single_result.size() > 0 && single_result.size() == nums.size())
		{
			if (result.empty() || !isVectorIntEqual(single_result, result[result.size() - 1]))
			{
				result.push_back(single_result);
			}
		}
		else
		{
			int i = 0;
			while (i < nums.size())
			{
				if (!is_used[i])
				{
					is_used[i] = true;
					single_result.push_back(nums[i]);
					dfs(nums, is_used, single_result, result);
					single_result.pop_back();
					is_used[i] = false;
					while (i + 1 < nums.size() && nums[i] == nums[i + 1])
					{
						++i;
					}
				}
				++i;
			}
		}
	}
	bool isVectorIntEqual(const vector<int>& first_vec, const vector<int> &second_vec)
	{
		bool result = false;
		if (first_vec.size() == second_vec.size())
		{
			for (int i = 0; i < first_vec.size(); ++i)
			{
				if (first_vec[i] != second_vec[i])
				{
					break;
				}
				if (i + 1 == first_vec.size())
				{
					result = true;
				}
			}
		}
		return result;
	}
};
/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int result = 0;
		int size = nums.size();
		if (size < 3)
			return result;
		int max_pos = size-1;
		vector<int> sort_nums = nums;
		std::sort(sort_nums.begin(),sort_nums.end());
		int result_diffirence = INT_MAX;
		int temp_target = 0;
		int left,right;
		int temp_sum = 0;
		for (int i = 0; i < size-2; ++i)
		{
			temp_target = target-sort_nums[i];
			left = i+1;
			right= max_pos;
			while (left < right)
			{
				temp_sum = sort_nums[i] + sort_nums[left]+sort_nums[right];
				if (abs(temp_sum-target) < result_diffirence)
				{
					result_diffirence = abs(temp_sum-target);
					result = temp_sum;
				}
				if (temp_sum == target)
				{
					return result;
				}
				else if(temp_sum > target)
				{
					--right;
				}
				else if(temp_sum < target)
				{
					++left;
				}
			}
		}
		return result;
    }
};